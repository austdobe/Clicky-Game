{"version":3,"sources":["components/renderImages.js","components/gameContainer.js","App.js","serviceWorker.js","index.js"],"names":["styling","container","padding","border","textAlign","image","height","maxWidth","backgroundColor","ImageRender","props","style","className","id","name","src","alt","key","onClick","handleClick","clicked","scoreBoard","paddingRight","paddingLeft","MessageText","nav","opacity","position","top","width","zIndex","body","paddingTop","font","jumbotron","color","gameBoard","GameContainer","state","images","message","score","topScore","imagePosition","console","log","forEach","i","setState","sort","Math","random","newScore","newTopScore","marginLeft","this","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LAEIA,EAAU,CACVC,UAAU,CACNC,QAAS,OACTC,OAAQ,OACRC,UAAW,UAEfC,MAAO,CACHH,QAAS,OACTC,OAAQ,gCACRG,OAAQ,QACRC,SAAU,QACVC,gBAAiB,YAkBVC,EAdK,SAACC,GACjB,OACI,yBAAKC,MAAOX,EAAQC,UAAUW,UAAU,gDACpC,yBACID,MAASX,EAAQK,MACjBQ,GAAMH,EAAMI,KACZC,IAAKL,EAAML,MACXW,IAAKN,EAAMI,KACXG,IAAKP,EAAMG,GAAIK,QAAS,kBAAIR,EAAMS,YAAYT,EAAMG,GAAIH,EAAMU,c,OCrBxEpB,EAAU,CACZqB,WAAW,CACXC,aAAc,IACdC,YAAa,GACbf,gBAAiB,WAEjBgB,YAAa,CACTpB,UAAW,UAEfqB,IAAI,CACAjB,gBAAiB,UACjBkB,QAAS,GACTC,SAAU,QACVC,IAAK,EACLC,MAAO,OACPC,OAAQ,IAGZC,KAAK,CACDvB,gBAAiB,UACjBwB,WAAY,KACZC,KAAM,qCAEVC,UAAW,CACP1B,gBAAiB,UACjB2B,MAAO,WAEXC,UAAW,CACP5B,gBAAiB,UACjBN,QAAS,SAwFFmC,E,2MApFXC,MAAQ,CACJC,SACAC,QAAS,4CACTC,MAAO,EACPC,SAAU,G,EAGdvB,YAAc,SAACN,EAAIO,GACf,IAAMuB,EAAgB,EAAKL,MAAMC,OAGjC,GAFAK,QAAQC,IAAIhC,GAETO,EAIC,OAHAuB,EAAcG,SAAQ,SAACzC,EAAO0C,GAC1BJ,EAAcI,GAAG3B,SAAQ,KAEtB,EAAK4B,SAAS,CACjB3C,MAAOsC,EAAcM,MAAK,kBAAMC,KAAKC,SAAW,MAChDX,QAAS,sCACTC,MAAO,IAIXE,EAAcG,SAAQ,SAACzC,EAAO0C,GACvBlC,IAAOR,EAAMQ,KAChB8B,EAAcI,GAAG3B,SAAU,MAH/B,MAOyB,EAAKkB,MAAvBI,EAPP,EAOOA,SACDU,EARN,EAOiBX,MACO,EAClBY,EAAcD,EAAWV,EAAWU,EAAWV,EAErD,OAAO,EAAKM,SAAS,CACjB3C,MAAOsC,EAAcM,MAAK,kBAAMC,KAAKC,SAAS,MAC9CX,QAAS,sCACTC,MAAOW,EACPV,SAAUW,K,wEAIb,IAAD,OACJ,OACI,6BACI,yBAAK1C,MAAOX,EAAQyB,IAAKb,UAAU,UAC/B,wBAAID,MAAO,CAAC2C,WAAW,SAAvB,eACA,uBAAG3C,MAAOX,EAAQwB,aACb+B,KAAKjB,MAAME,SAEhB,yBAAK7B,MAAOX,EAAQqB,YAChB,sCAAakC,KAAKjB,MAAMG,OACxB,0CAAiBc,KAAKjB,MAAMI,YAGpC,yBACA/B,MAAOX,EAAQ+B,MACX,yBAAKnB,UAAU,YACfD,MAAOX,EAAQkC,WACX,wBAAItB,UAAU,eAAd,gDAGJ,yBAAKA,UAAU,aAEX,yBAAKA,UAAU,MACfD,MAAOX,EAAQoC,WAGPmB,KAAKjB,MAAMC,OAAOiB,KAAI,SAAAnD,GAAK,OACvB,kBAAC,EAAD,CACIY,IAAOZ,EAAMQ,GACbA,GAAMR,EAAMQ,GACZC,KAAQT,EAAMS,KACdM,QAAWf,EAAMe,QACjBf,MAASA,EAAMA,MACfc,YAAe,EAAKA,yB,GA1EhCsC,aCtBbC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.268d0090.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nvar styling = {\r\n    container:{\r\n        padding: '10px',\r\n        border: 'none',\r\n        textAlign: 'center',\r\n    },\r\n    image: {\r\n        padding: '10px',\r\n        border: '1px solid rgba(0, 0, 0, 0.25)',\r\n        height: '150px',\r\n        maxWidth: '200px',\r\n        backgroundColor: '#86A3c3',\r\n        \r\n    }\r\n}\r\nconst ImageRender = (props) => { \r\n    return(\r\n        <div style={styling.container}className=\"col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\">\r\n            <img\r\n                style = {styling.image}\r\n                id = {props.name}\r\n                src={props.image}\r\n                alt={props.name}\r\n                key={props.id} onClick={()=>props.handleClick(props.id, props.clicked)}>  \r\n            </img>\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default ImageRender","import React, {Component}  from 'react';\r\nimport ImageRender from './renderImages'\r\nimport images from '../images.json'\r\n\r\nconst styling = {\r\n    scoreBoard:{\r\n    paddingRight: 100,\r\n    paddingLeft: 10,\r\n    backgroundColor: '#D8e0BB',\r\n    },\r\n    MessageText: {\r\n        textAlign: 'center'\r\n    },\r\n    nav:{\r\n        backgroundColor: '#B6CEC7',\r\n        opacity: 0.9,\r\n        position: 'fixed',\r\n        top: 0,\r\n        width: '100%',\r\n        zIndex: 99\r\n        \r\n    },\r\n    body:{\r\n        backgroundColor: '#7268A6',\r\n        paddingTop: '8%',\r\n        font: 'font-family: \"Kanit\", sans-serif;'\r\n    },\r\n    jumbotron: {\r\n        backgroundColor: '#6B3074',\r\n        color: '#D8E0BB'\r\n    },\r\n    gameBoard: {\r\n        backgroundColor: '#b084cc',\r\n        padding: '20px'\r\n    }\r\n};\r\nclass GameContainer extends Component{\r\n    state = {\r\n        images,\r\n        message: 'Click one of the pictures to get started!',\r\n        score: 0,\r\n        topScore: 0\r\n    };\r\n\r\n    handleClick = (id, clicked) =>{\r\n        const imagePosition = this.state.images;\r\n        console.log(id)\r\n\r\n        if(clicked){\r\n            imagePosition.forEach((image, i) => {\r\n                imagePosition[i].clicked=false;\r\n            }); \r\n            return this.setState({\r\n                image: imagePosition.sort(() => Math.random() - 0.5),\r\n                message: 'You guessed incorrectly, try again!',\r\n                score: 0\r\n            });\r\n        }\r\n        else{\r\n            imagePosition.forEach((image, i) => {\r\n                if(id === image.id){\r\n                imagePosition[i].clicked = true;\r\n                };\r\n            });\r\n\r\n            const {topScore, score} =this.state;\r\n            const newScore = score +1;\r\n            const newTopScore = newScore > topScore ? newScore : topScore;\r\n\r\n            return this.setState({\r\n                image: imagePosition.sort(() => Math.random()-0.5),\r\n                message: 'You guessed correctly! Keep going!!',\r\n                score: newScore,\r\n                topScore: newTopScore,\r\n            });\r\n        };\r\n    };\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div style={styling.nav} className='navbar'>\r\n                    <h1 style={{marginLeft:'20px'}}>Clicky Paws</h1>\r\n                    <p style={styling.MessageText}>\r\n                        {this.state.message}\r\n                    </p>\r\n                    <div style={styling.scoreBoard}>\r\n                        <h3 >Score: {this.state.score}</h3>\r\n                        <h3 >Top Score: {this.state.topScore}</h3>\r\n                    </div>\r\n                </div>\r\n                <div \r\n                style={styling.body}>\r\n                    <div className='jumbotron'\r\n                    style={styling.jumbotron}>\r\n                        <h3 className='text-center'>Remember not to click the same image twice!</h3>\r\n                            \r\n                    </div>\r\n                    <div className='container'>\r\n\r\n                        <div className='row'\r\n                        style={styling.gameBoard}>\r\n                            \r\n                            {\r\n                                this.state.images.map(image =>(\r\n                                    <ImageRender\r\n                                        key = {image.id}\r\n                                        id = {image.id}\r\n                                        name = {image.name}\r\n                                        clicked = {image.clicked}\r\n                                        image = {image.image}\r\n                                        handleClick = {this.handleClick}\r\n                                    />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        );\r\n    };\r\n};\r\nexport default GameContainer;","import React from 'react';\r\nimport GameContainer from './components/gameContainer';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div> \r\n      <GameContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}